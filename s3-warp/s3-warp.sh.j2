#!/usr/bin/bash
#SBATCH --job-name={{ job_name }}
#SBATCH --time={{ max_job_time }}
#SBATCH --nodes={{ item.nodes }}
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task={{ (1 + item.threads_per_node / 2) | int }}
#SBATCH --dependency=singleton
#SBATCH --partition={{ partition }}
#SBATCH --account={{ account }}

# Check required env vars are set 
if [[ -z $WARP_HOST || -z $WARP_ACCESS_KEY || -z $WARP_SECRET_KEY ]]; then
    echo "The environment variables WARP_HOST, WARP_ACCESS_KEY and WARP_SECRET_KEY must be set."
    exit 1
fi

# Print a message about the git status of the checked out repo version
echo "Git repo local checkout status: {{ smatrix_git_describe }}"

# Pull in docker image and build singularity image from it
CONTAINER_FILENAME=warp.sif
if [[ ! -f $CONTAINER_FILENAME ]]; then
    singularity build $CONTAINER_FILENAME docker://ghcr.io/stackhpc/s3-warp-singularity:latest
fi

# Start a warp client on each job node
srun --spread-job singularity run warp.sif client --no-color &

#Unpack list of nodes which have a warp client running
CLIENT_NODES=$(scontrol show hostname $SLURM_JOB_NODELIST | paste -d, -s)
echo Client nodes: $CLIENT_NODES

# Trigger benchmark run on all clients
OUTPUT_FILE={{ smatrix_template_dest_dir }}/warp-results-full{{ smatrix_template_suffix }}
singularity run warp.sif {{ item.benchmark_type }} \
    --concurrent {{ item.threads_per_node }} \
    --objects {{ item.files_total // item.nodes }} \
    --obj.size "{{ item.obj_sizes | replace("-", ",", 1) }}" \
    {{ "--obj.randsize" if "-" in item.obj_sizes }} \
    --benchdata $OUTPUT_FILE \
    --no-color \
    --autoterm \
    --get-distrib 45 \
    --stat-distrib 30 \
    --put-distrib 15 \
    --delete-distrib 15 \
    --duration 
    {%- if item.duration is defined %} 
        {{- ' ' + item.duration -}}
    {%- else %} 
        {%- if 'GiB' in item.obj_sizes %}
            {{- ' 30m' -}}
        {%- elif 'MiB' in item.obj_sizes %}
            {{- ' 5m' -}}
        {%- else  %}
            {{- ' 1m' -}}
        {%- endif %}
    {%- endif %}
    \
    --warp-client $CLIENT_NODES \

# Run warp analysis tool on output file
SUMMARY_FILE={{ smatrix_template_dest_dir }}/warp-results-summary{{ smatrix_template_suffix }}
singularity run warp.sif analyze $OUTPUT_FILE.csv.zst --analyze.out $SUMMARY_FILE.csv > $SUMMARY_FILE.txt
